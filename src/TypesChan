{-|
Module      : Types
Description : This module includes all the type definitions required throughout the application
-}
module Types (
    -- * Types
    User (..),
    Message (..),
    Communication (..),
    -- SocialNetwork (..),
    MessageID (..),
    Messages (..),
) where

import Data.Map (Map)
import qualified Data.Map as Map
import Control.Concurrent

-- | This is the data structure that will define a User type
data User = User {
    -- | The 'userid' method returns a User's id
    userid :: String,
    -- | The 'username' method returns a User's username
    username :: String
} deriving (Show)

-- | The Message type will keep track of a full interaction between two users
type Message = [String]

-- | A Communication data structure will help map user id's to the message record between them
data Communication = Communication User User

-- | A MessageID type will be generated by a communication structure and be used as key to find an interaction between two users
type MessageID = String

-- | The Messages type is a map containing all messages between users in this socialnetwork 
type Messages = Map MessageID Message

newType SocialNetwork = SocialNetwork (Chan Messages)